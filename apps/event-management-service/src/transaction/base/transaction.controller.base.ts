/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransactionService } from "../transaction.service";
import { TransactionCreateInput } from "./TransactionCreateInput";
import { TransactionWhereInput } from "./TransactionWhereInput";
import { TransactionWhereUniqueInput } from "./TransactionWhereUniqueInput";
import { TransactionFindManyArgs } from "./TransactionFindManyArgs";
import { TransactionUpdateInput } from "./TransactionUpdateInput";
import { Transaction } from "./Transaction";
import { AssetDescriptionFindManyArgs } from "../../assetDescription/base/AssetDescriptionFindManyArgs";
import { AssetDescription } from "../../assetDescription/base/AssetDescription";
import { AssetDescriptionWhereUniqueInput } from "../../assetDescription/base/AssetDescriptionWhereUniqueInput";
import { BlockTransactionFindManyArgs } from "../../blockTransaction/base/BlockTransactionFindManyArgs";
import { BlockTransaction } from "../../blockTransaction/base/BlockTransaction";
import { BlockTransactionWhereUniqueInput } from "../../blockTransaction/base/BlockTransactionWhereUniqueInput";
import { AssetFindManyArgs } from "../../asset/base/AssetFindManyArgs";
import { Asset } from "../../asset/base/Asset";
import { AssetWhereUniqueInput } from "../../asset/base/AssetWhereUniqueInput";

export class TransactionControllerBase {
  constructor(protected readonly service: TransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Transaction })
  async create(
    @common.Body() data: TransactionCreateInput
  ): Promise<Transaction> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        expiration: true,
        fee: true,
        hash: true,
        id: true,
        networkVersion: true,
        notes: true,
        size: true,
        spends: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Transaction] })
  @ApiNestedQuery(TransactionFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Transaction[]> {
    const args = plainToClass(TransactionFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        expiration: true,
        fee: true,
        hash: true,
        id: true,
        networkVersion: true,
        notes: true,
        size: true,
        spends: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<Transaction | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        expiration: true,
        fee: true,
        hash: true,
        id: true,
        networkVersion: true,
        notes: true,
        size: true,
        spends: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() data: TransactionUpdateInput
  ): Promise<Transaction | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          expiration: true,
          fee: true,
          hash: true,
          id: true,
          networkVersion: true,
          notes: true,
          size: true,
          spends: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<Transaction | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          expiration: true,
          fee: true,
          hash: true,
          id: true,
          networkVersion: true,
          notes: true,
          size: true,
          spends: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/assetDescriptions")
  @ApiNestedQuery(AssetDescriptionFindManyArgs)
  async findManyAssetDescriptions(
    @common.Req() request: Request,
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<AssetDescription[]> {
    const query = plainToClass(AssetDescriptionFindManyArgs, request.query);
    const results = await this.service.findAssetDescriptions(params.id, {
      ...query,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        transaction: {
          select: {
            id: true,
          },
        },

        type: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assetDescriptions")
  async connectAssetDescriptions(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetDescriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetDescriptions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assetDescriptions")
  async updateAssetDescriptions(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetDescriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetDescriptions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assetDescriptions")
  async disconnectAssetDescriptions(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetDescriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetDescriptions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/blocksTransactions")
  @ApiNestedQuery(BlockTransactionFindManyArgs)
  async findManyBlocksTransactions(
    @common.Req() request: Request,
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<BlockTransaction[]> {
    const query = plainToClass(BlockTransactionFindManyArgs, request.query);
    const results = await this.service.findBlocksTransactions(params.id, {
      ...query,
      select: {
        block: {
          select: {
            id: true,
          },
        },

        id: true,
        index: true,

        transaction: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/blocksTransactions")
  async connectBlocksTransactions(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: BlockTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blocksTransactions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/blocksTransactions")
  async updateBlocksTransactions(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: BlockTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blocksTransactions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/blocksTransactions")
  async disconnectBlocksTransactions(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: BlockTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blocksTransactions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/createdAssets")
  @ApiNestedQuery(AssetFindManyArgs)
  async findManyCreatedAssets(
    @common.Req() request: Request,
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<Asset[]> {
    const query = plainToClass(AssetFindManyArgs, request.query);
    const results = await this.service.findCreatedAssets(params.id, {
      ...query,
      select: {
        createdAt: true,

        createdTransaction: {
          select: {
            id: true,
          },
        },

        id: true,
        identifier: true,
        metadata: true,
        name: true,
        owner: true,
        supply: true,
        updatedAt: true,
        verifiedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/createdAssets")
  async connectCreatedAssets(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      createdAssets: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/createdAssets")
  async updateCreatedAssets(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      createdAssets: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/createdAssets")
  async disconnectCreatedAssets(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      createdAssets: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
